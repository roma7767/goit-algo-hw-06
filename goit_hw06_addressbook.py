from collections import UserDict

# –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –ø–æ–ª—ñ–≤ (—ñ–º‚Äô—è, —Ç–µ–ª–µ—Ñ–æ–Ω)
class Field:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)

# –ö–ª–∞—Å –¥–ª—è —ñ–º–µ–Ω—ñ
class Name(Field):
    pass

# –ö–ª–∞—Å –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
class Phone(Field):
    def __init__(self, value):
        if not value.isdigit() or len(value) != 10:
            raise ValueError("Phone number must contain exactly 10 digits.")
        super().__init__(value)

# –ö–ª–∞—Å –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É (–∫–æ–Ω—Ç–∞–∫—Ç—É)
class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []

    def add_phone(self, phone):
        self.phones.append(Phone(phone))

    def remove_phone(self, phone):
        for p in self.phones:
            if p.value == phone:
                self.phones.remove(p)
                return
        raise ValueError("Phone number not found.")

    def edit_phone(self, old_phone, new_phone):
        for i, p in enumerate(self.phones):
            if p.value == old_phone:
                self.phones[i] = Phone(new_phone)
                return
        raise ValueError("Old phone number not found.")

    def find_phone(self, phone):
        for p in self.phones:
            if p.value == phone:
                return p
        return None

    def __str__(self):
        phones_str = "; ".join(str(p) for p in self.phones)
        return f"Contact name: {self.name.value}, phones: {phones_str}"

# –ö–ª–∞—Å –∞–¥—Ä–µ—Å–Ω–æ—ó –∫–Ω–∏–≥–∏
class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]

    def __str__(self):
        return "\n".join(str(record) for record in self.data.values())

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è 

book = AddressBook()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –¥–ª—è John
john_record = Record("John")
john_record.add_phone("1234567890")
john_record.add_phone("5555555555")

# ‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É John –¥–æ –∞–¥—Ä–µ—Å–Ω–æ—ó –∫–Ω–∏–≥–∏
book.add_record(john_record)
print("‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–ø–∏—Å John –¥–æ –∞–¥—Ä–µ—Å–Ω–æ—ó –∫–Ω–∏–≥–∏.")

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –¥–ª—è Jane
jane_record = Record("Jane")
jane_record.add_phone("8765432101")
book.add_record(jane_record)
print("‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–ø–∏—Å Jane –¥–æ –∞–¥—Ä–µ—Å–Ω–æ—ó –∫–Ω–∏–≥–∏.")

# –í–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤
print("\nüìí –ê–¥—Ä–µ—Å–Ω–∞ –∫–Ω–∏–≥–∞:\n", book)

# –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è John
john = book.find("John")
john.edit_phone("1234567890", "1112223333")

# –ü–æ—à—É–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É —É –∑–∞–ø–∏—Å—ñ John
found = john.find_phone("5555555555")
print("üîç –ó–Ω–∞–π–¥–µ–Ω–∏–π –Ω–æ–º–µ—Ä:", found)

# –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É Jane
book.delete("Jane")
